pipeline {
    agent any
    tools {
        maven "Maven"
    }
    parameters {
        string(
            defaultValue: '3.110.133.221',
            description: 'docker IP address',
            name: 'docker-ip'
        )
    }
    environment {
        docker_ssh = "ssh -o StrictHostKeyChecking=no ec2-user@${params['docker-ip']}"
    }
    stages {
        stage('git clone and mvn build') {
            steps {
                checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/nikhiltuthika/sample.git']])
                sh "mvn clean install"
            }
        }
        stage('docker remove old image,build image and run container') {
            steps {
                script {
                    sshagent(['dockerid']) {
                        sh "scp -o StrictHostKeyChecking=no /var/lib/jenkins/workspace/git/target/*.jar ec2-user@${params['docker-ip']}:/home/ec2-user/git/"
                        sh "${env.docker_ssh} 'docker rmi mygit'"
                        sh "${env.docker_ssh} 'docker build -t mygit /home/ec2-user/git/'"
                        sh "${env.docker_ssh} 'docker-compose -f git.yml up -d'"
                    }
                }
            }
        }
        stage("tag image") {
            steps {
                script {
                    sshagent(['dockerid']) {
                        sh "${env.docker_ssh} 'docker tag mygit nikhiltuthika/mygit-1'"
                    }
                    withCredentials([string(credentialsId: 'dockerhub', variable: 'dockerhub')]) {
                        sshagent(['dockerid']) {
                            sh "${env.docker_ssh} 'docker login -u nikhiltuthika -p $dockerhub'"
                            sh "${env.docker_ssh} 'docker push nikhiltuthika/mygit-1'"
                        }
                    }
                }
            }
        }
    }
    post {
        failure {
           script {
                slackSend(
                    color: '#FF0000', // Red color
                    message: "Build failed! :cry:",
                    channel: '#testing',
                    tokenCredentialId: 'slack-testing'
                )
            }
        }
        success {
            script {
                slackSend(
                    color: '#00FF00', // Green color
                    message: "Build successful! :tada:",
                    channel: '#testing', // Specify your Slack channel
                    tokenCredentialId: 'slack-testing' // Jenkins credentials containing your Slack token
                )
        }   }
    }
}
